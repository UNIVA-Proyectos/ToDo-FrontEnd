rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function hasValidEmail() {
      return request.auth.token.email_verified == true;
    }

    // Reglas para la colección tasks
    match /tasks/{taskId} {
      allow create: if isAuthenticated();
      
      allow read: if isAuthenticated();
      
      allow update: if isAuthenticated() && (
        resource.data.user_id == request.auth.uid ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['userPhotoURL']) &&
         resource.data.user_id == request.auth.uid)
      );
      
      allow delete: if isAuthenticated() && resource.data.user_id == request.auth.uid;

      match /comentarios/{commentId} {
        allow read, write: if isAuthenticated();
      }
    }

    // Reglas para la colección users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
      
      // Permitir explícitamente la actualización de photoURL
      allow update: if isAuthenticated() && 
        request.auth.uid == userId &&
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['photoURL']) ||
         request.resource.data.keys().hasAll(resource.data.keys()));
      
      match /notifications/{notificationId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }
  }
}
